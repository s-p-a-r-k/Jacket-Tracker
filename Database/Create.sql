CREATE TABLE TYPE(
TypeName VARCHAR(20) PRIMARY KEY
);

CREATE TABLE SIZE(
Size VARCHAR(10),
TypeName VARCHAR(20),
PRIMARY KEY(Size, TypeName),
FOREIGN KEY(TypeName) REFERENCES TYPE(TypeName) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE STATUS(
StatusName VARCHAR(20) PRIMARY KEY
);

CREATE TABLE INSTRUMENT(
InstrumentName VARCHAR(30) PRIMARY KEY
);

CREATE TABLE STUDENT(
Email VARCHAR(50) PRIMARY KEY,
GTID CHAR(9) UNIQUE,
FirstName VARCHAR(20) NOT NULL,
LastName VARCHAR(20) NOT NULL,
Is_Lieutenant BOOLEAN NOT NULL,
InstrumentName VARCHAR(30),
FOREIGN KEY(InstrumentName) REFERENCES INSTRUMENT(InstrumentName) ON DELETE SET NULL ON UPDATE CASCADE
);

### very redundant, thus not created
CREATE TABLE ASSIGNMENT(
Email VARCHAR(50),
TypeName VARCHAR(20),
UniformID VARCHAR(5),
PRIMARY KEY(TypeName,UniformID),
FOREIGN KEY(TypeName, UniformID) REFERENCES UNIFORM_PART(TypeName, UniformID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(Email) REFERENCES STUDENT(Email) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE UNIFORM(
Email VARCHAR(50),
TypeName VARCHAR(20) NOT NULL,
UniformID VARCHAR(5) NOT NULL,
Size VARCHAR(10),
StatusName, VARCHAR(20),
Notes TEXT,
PRIMARY KEY(TypeName, UniformID),
FOREIGN KEY(Size, TypeName) REFERENCES SIZE(Size, TypeName) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(Email) REFERENCES STUDENT(Email) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY(StatusName) REFERENCES STATUS(StatusName) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE LIEUTENANT(
Email VARCHAR(50) PRIMARY KEY,
Password VARCHAR(20) NOT NULL,
Username VARCHAR(20) UNIQUE,
FOREIGN KEY(Email) REFERENCES STUDENT(Email) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE EMAIL(
Title VARCHAR(50) PRIMARY KEY,
Content TEXT NOT NULL
);

CREATE TABLE GROUPS(
GroupName VARCHAR(50) PRIMARY KEY
);

CREATE TABLE GROUP_MEMBERS(
Email VARCHAR(50) NOT NULL,
GroupName VARCHAR(50) NOT NULL,
PRIMARY KEY(Email, GroupName),
FOREIGN KEY(Email) REFERENCES STUDENT(Email) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(GroupName) REFERENCES GROUPS(GroupName) ON DELETE CASCADE ON UPDATE CASCADE
);



